// Generated by CoffeeScript 1.12.3
var ChEMBLSketch, Target, elastic_json_data, elastic_query_data, elastic_query_size, elastic_query_url, last_compound_id, last_target_id, loadCompoundCard, loadElasticJSON, loadTargetCard, startSketch;

elastic_json_data = null;

elastic_query_size = 100;

last_compound_id = null;

last_target_id = null;

loadCompoundCard = function(chembl_id) {
  var html_card;
  if (last_compound_id !== chembl_id) {
    html_card = '<div style="display: inline-block"><object id="compound_card" data="http://chembl-glados.herokuapp.com/compound_report_card/' + chembl_id + '/embed/name_and_classification/" width="360px" height="600px"></object></div>';
    $('#compound_card').remove();
    $('body').append(html_card);
    return last_compound_id = chembl_id;
  }
};

loadTargetCard = function(chembl_id) {
  var html_card;
  if (last_target_id !== chembl_id) {
    html_card = '<div style="display: inline-block"><object id="target_card" data="http://chembl-glados.herokuapp.com/target_report_card/' + chembl_id + '/embed/name_and_classification/" width="360px" height="600px"></object></div>';
    $('#target_card ').remove();
    $('body').append(html_card);
    return last_target_id = chembl_id;
  }
};

Target = (function() {
  Target.geMoleculeCount = function() {
    return _.keys(Target.MOLECULE_KNOWN_IDS).length;
  };

  Target.MOLECULE_KNOWN_IDS = {};

  Target.MAX_COUNT = Number.NEGATIVE_INFINITY;

  Target.reduceData = function(targets) {
    var i, j, k, l, len, len1, len2, len3, molecule_id, molecule_id_i, reduced_targets, ref, ref1, target_i;
    reduced_targets = [];
    ref = _.keys(Target.MOLECULE_KNOWN_IDS);
    for (i = 0, len = ref.length; i < len; i++) {
      molecule_id = ref[i];
      if (Target.MOLECULE_KNOWN_IDS[molecule_id] <= elastic_query_size / 10) {
        delete Target.MOLECULE_KNOWN_IDS[molecule_id];
        for (j = 0, len1 = targets.length; j < len1; j++) {
          target_i = targets[j];
          delete target_i.molecule_counts[molecule_id];
        }
      }
    }
    for (k = 0, len2 = targets.length; k < len2; k++) {
      target_i = targets[k];
      ref1 = _.keys(target_i.molecule_counts);
      for (l = 0, len3 = ref1.length; l < len3; l++) {
        molecule_id_i = ref1[l];
        if (target_i.molecule_counts[molecule_id_i] === 0) {
          delete target_i.molecule_counts[molecule_id_i];
        }
      }
      if (_.keys(target_i.molecule_counts).length > elastic_query_size / 10) {
        reduced_targets.push(target_i);
      }
    }
    return reduced_targets;
  };

  Target.parseElasticJSON = function(elasticJson) {
    var bucket_i, bucket_j, i, j, len, len1, ref, ref1, target_i, target_id_i, targets;
    targets = [];
    ref = elasticJson.aggregations.group_by_target.buckets;
    for (i = 0, len = ref.length; i < len; i++) {
      bucket_i = ref[i];
      target_id_i = bucket_i.key;
      target_i = new Target(target_id_i);
      targets.push(target_i);
      ref1 = bucket_i.group_by_compound.buckets;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        bucket_j = ref1[j];
        target_i.addCompoundCount(bucket_j.key, bucket_j.doc_count);
      }
    }
    targets = Target.reduceData(targets);
    return targets;
  };

  Target.HSB_HUE = 160;

  Target.CELL_SIZE = 10;

  function Target(target_id) {
    this.target_id = target_id;
    this.molecule_counts = {};
  }

  Target.prototype.addCompoundCount = function(molecule_id, doc_count) {
    this.molecule_counts[molecule_id] = doc_count;
    if (!_.has(Target.MOLECULE_KNOWN_IDS, molecule_id)) {
      Target.MOLECULE_KNOWN_IDS[molecule_id] = 0;
    }
    Target.MOLECULE_KNOWN_IDS[molecule_id] += 1;
    if (doc_count > Target.MAX_COUNT) {
      return Target.MAX_COUNT = doc_count;
    }
  };

  Target.prototype.getTargetMoleculeAndCount = function(p, heatmapX, heatmapWidth, target_array_pos) {
    var arrayPos, doc_count, molecule_id, molecules;
    molecules = _.keys(Target.MOLECULE_KNOWN_IDS);
    arrayPos = p.floor(p.map(heatmapX, 0, heatmapWidth, 0, molecules.length));
    if (arrayPos < 0 || arrayPos > molecules.length - 1) {
      return null;
    }
    molecule_id = molecules[arrayPos];
    doc_count = _.has(this.molecule_counts, molecule_id) ? this.molecule_counts[molecule_id] : 0;
    return {
      x_array_pos: arrayPos,
      y_array_pos: target_array_pos,
      target_chembl_id: this.target_id,
      molecule_chembl_id: molecule_id,
      count: doc_count
    };
  };

  Target.prototype.draw = function(p, yPos) {
    var cellX, doc_count, i, index, len, molecule_id, molecules, results, sat, val;
    molecules = _.keys(Target.MOLECULE_KNOWN_IDS);
    results = [];
    for (index = i = 0, len = molecules.length; i < len; index = ++i) {
      molecule_id = molecules[index];
      cellX = p.map(index, 0, molecules.length, 0, molecules.length * Target.CELL_SIZE);
      doc_count = _.has(this.molecule_counts, molecule_id) ? this.molecule_counts[molecule_id] : 0;
      if (doc_count !== 0) {
        sat = p.floor(p.map(doc_count, 0, 15, 5, 100)) % 100;
        val = 90;
        p.fill(p.color(Target.HSB_HUE, sat, val));
        results.push(p.rect(cellX + 1, yPos + 1, Target.CELL_SIZE - 2, Target.CELL_SIZE - 2));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return Target;

})();

ChEMBLSketch = function(p) {
  var canvas, current_hoover, current_select, drawCurrentSelection, drawHeatmap, drawSelectionHoovers, getTargetCompound, heatmap, heatmap_x_pos, heatmap_y_pos, targets;
  console.log(elastic_json_data);
  targets = null;
  canvas = null;
  heatmap = null;
  heatmap_x_pos = 10;
  heatmap_y_pos = 10;
  current_hoover = null;
  current_select = null;
  drawSelectionHoovers = function(xArrayPos, yArrayPos) {
    var molecules, xStart, yStart;
    molecules = _.keys(Target.MOLECULE_KNOWN_IDS);
    xStart = p.map(xArrayPos, 0, molecules.length, heatmap_x_pos, heatmap_x_pos + heatmap.width);
    yStart = p.map(yArrayPos, 0, targets.length, heatmap_y_pos, heatmap_y_pos + heatmap.height);
    p.colorMode(p.RGB);
    p.strokeWeight(2);
    p.stroke(200, 0, 0);
    p.noFill();
    p.rect(xStart, heatmap_y_pos, Target.CELL_SIZE, heatmap.height);
    return p.rect(heatmap_x_pos, yStart, heatmap.width, Target.CELL_SIZE);
  };
  drawCurrentSelection = function() {
    var molecules, xStart, yStart;
    molecules = _.keys(Target.MOLECULE_KNOWN_IDS);
    xStart = p.map(current_select.x_array_pos, 0, molecules.length, heatmap_x_pos, heatmap_x_pos + heatmap.width);
    yStart = p.map(current_select.y_array_pos, 0, targets.length, heatmap_y_pos, heatmap_y_pos + heatmap.height);
    p.colorMode(p.RGB);
    p.strokeWeight(4);
    p.stroke(100, 0, 200);
    p.noFill();
    return p.rect(xStart, yStart, Target.CELL_SIZE, Target.CELL_SIZE);
  };
  getTargetCompound = function() {
    var arrayPos, heatmapX, heatmapY;
    heatmapX = p.mouseX - heatmap_x_pos;
    heatmapY = p.mouseY - heatmap_y_pos;
    arrayPos = p.floor(p.map(heatmapY, 0, heatmap.height, 0, targets.length));
    if (arrayPos < 0 || arrayPos > targets.length - 1) {
      return null;
    }
    return targets[arrayPos].getTargetMoleculeAndCount(p, heatmapX, heatmap.width, arrayPos);
  };
  drawHeatmap = function() {
    var i, index, len, results, target_i, yPos;
    heatmap = p.createGraphics(Target.geMoleculeCount() * Target.CELL_SIZE, targets.length * Target.CELL_SIZE);
    heatmap.colorMode(p.RGB);
    heatmap.background(30);
    heatmap.colorMode(p.HSB);
    heatmap.noStroke();
    results = [];
    for (index = i = 0, len = targets.length; i < len; index = ++i) {
      target_i = targets[index];
      yPos = p.map(index, 0, targets.length, 0, targets.length * Target.CELL_SIZE);
      results.push(target_i.draw(heatmap, yPos));
    }
    return results;
  };
  p.preload = function() {
    return targets = Target.parseElasticJSON(elastic_json_data);
  };
  p.setup = function() {
    var plotH, plotW;
    drawHeatmap();
    plotW = heatmap.width + 2 * heatmap_x_pos;
    plotH = heatmap.height + heatmap_y_pos + 3 * 1.5 * Target.CELL_SIZE;
    canvas = p.createCanvas(plotW + 2, plotH + 2);
    console.log(targets);
    return p.noLoop();
  };
  p.draw = function() {
    var labels_y_pos;
    p.colorMode(p.RGB);
    p.background(255);
    p.image(heatmap, heatmap_x_pos, heatmap_y_pos);
    p.noFill();
    p.stroke(0);
    p.rect(1, 1, p.width - 2, p.height - 2);
    if (current_hoover) {
      drawSelectionHoovers(current_hoover.x_array_pos, current_hoover.y_array_pos);
      p.noStroke();
      p.textStyle(p.BOLD);
      p.textAlign(p.LEFT, p.TOP);
      p.textSize(1.5 * Target.CELL_SIZE);
      p.fill(0);
      labels_y_pos = heatmap_y_pos + heatmap.height;
      p.text("Target: " + current_hoover.target_chembl_id, heatmap_x_pos, labels_y_pos);
      labels_y_pos += 1.5 * Target.CELL_SIZE;
      p.text("Compound: " + current_hoover.molecule_chembl_id, heatmap_x_pos, labels_y_pos);
      labels_y_pos += 1.5 * Target.CELL_SIZE;
      p.text("Count: " + current_hoover.count, heatmap_x_pos, labels_y_pos);
    }
    if (current_select) {
      loadCompoundCard(current_select.molecule_chembl_id);
      loadTargetCard(current_select.target_chembl_id);
      drawCurrentSelection();
      p.noStroke();
      p.textStyle(p.BOLD);
      p.textAlign(p.RIGHT, p.TOP);
      p.textSize(1.5 * Target.CELL_SIZE);
      p.fill(0);
      labels_y_pos = heatmap_y_pos + heatmap.height;
      p.text("Selected Target: " + current_select.target_chembl_id, heatmap_x_pos + heatmap.width, labels_y_pos);
      labels_y_pos += 1.5 * Target.CELL_SIZE;
      p.text("Selected Compound: " + current_select.molecule_chembl_id, heatmap_x_pos + heatmap.width, labels_y_pos);
      labels_y_pos += 1.5 * Target.CELL_SIZE;
      return p.text("Count: " + current_select.count, heatmap_x_pos + heatmap.width, labels_y_pos);
    }
  };
  p.mouseMoved = function() {
    current_hoover = getTargetCompound();
    return p.draw();
  };
  return p.mouseClicked = function() {
    if (p.mouseButton === p.LEFT) {
      current_select = current_hoover;
      return p.draw();
    }
  };
};

startSketch = function(elastic_data) {
  var sketch;
  elastic_json_data = elastic_data;
  return sketch = new p5(ChEMBLSketch);
};

elastic_query_url = "https://wwwdev.ebi.ac.uk/chembl/glados-es/chembl_activity/_search";

elastic_query_data = {
  aggs: {
    group_by_target: {
      terms: {
        field: "target_chembl_id",
        size: elastic_query_size
      },
      aggs: {
        group_by_compound: {
          terms: {
            field: "molecule_chembl_id",
            size: elastic_query_size
          },
          aggs: {
            activity_count: {
              value_count: {
                field: "activity_id"
              }
            }
          }
        }
      }
    }
  }
};

loadElasticJSON = function(url, data, success_callback) {
  return $.ajax(elastic_query_url, {
    data: JSON.stringify(elastic_query_data),
    method: 'POST',
    success: success_callback,
    error: function(jqXHR, textStatus, errorThrown) {
      console.log(textStatus);
      console.log(errorThrown);
      return alert("Error retrieving data!");
    }
  });
};

$(document).ready(function() {
  $(document).ajaxStart(function() {
    return $('body').append("<div id='ajax_loading'>Loading data . . .</div>");
  });
  $(document).ajaxStop(function() {
    return $('#ajax_loading').remove();
  });
  return loadElasticJSON(elastic_query_url, elastic_query_data, startSketch);
});

//# sourceMappingURL=chembl-sketch.js.map
