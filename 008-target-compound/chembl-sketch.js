// Generated by CoffeeScript 1.12.3
var ChEMBLSketch, Target, col_array, elastic_json_data, elastic_query_data, elastic_query_url, loadElasticJSON, startSketch;

elastic_json_data = null;

col_array = ["#F7F7F7", "#EAF1F4", "#DDEBF2", "#D1E5F0", "#BCDAEA", "#A7CFE4", "#92C5DE", "#77B4D5", "#5DA3CC", "#4393C3", "#3783BB", "#2C75B3", "#2166AC", "#175493", "#0E427A", "#053061"];

Target = (function() {
  Target.MOLECULE_KNOWN_IDS = {};

  Target.MAX_COUNT = Number.NEGATIVE_INFINITY;

  Target.reduceKnownMolecules = function() {
    var i, len, molecule_id, ref, results;
    ref = _.keys(Target.MOLECULE_KNOWN_IDS);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      molecule_id = ref[i];
      if (Target.MOLECULE_KNOWN_IDS[molecule_id] <= 100 / 10) {
        results.push(delete Target.MOLECULE_KNOWN_IDS[molecule_id]);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Target.parseElasticJSON = function(elasticJson) {
    var bucket_i, bucket_j, i, j, len, len1, ref, ref1, target_i, target_id_i, targets;
    targets = [];
    ref = elasticJson.aggregations.group_by_target.buckets;
    for (i = 0, len = ref.length; i < len; i++) {
      bucket_i = ref[i];
      target_id_i = bucket_i.key;
      target_i = new Target(target_id_i);
      targets.push(target_i);
      ref1 = bucket_i.group_by_compound.buckets;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        bucket_j = ref1[j];
        target_i.addCompoundCount(bucket_j.key, bucket_j.doc_count);
      }
    }
    Target.reduceKnownMolecules();
    return targets;
  };

  function Target(target_id) {
    this.target_id = target_id;
    this.molecule_counts = {};
  }

  Target.prototype.addCompoundCount = function(molecule_id, doc_count) {
    this.molecule_counts[molecule_id] = doc_count;
    if (!_.has(Target.MOLECULE_KNOWN_IDS, molecule_id)) {
      Target.MOLECULE_KNOWN_IDS[molecule_id] = 0;
    }
    Target.MOLECULE_KNOWN_IDS[molecule_id] += 1;
    if (doc_count > Target.MAX_COUNT) {
      return Target.MAX_COUNT = doc_count;
    }
  };

  Target.prototype.draw = function(p, yPos, cellHeight, xStart, xEnd) {
    var cellWidht, cellX, col_index, doc_count, i, index, len, molecule_id, molecules, results;
    molecules = _.keys(Target.MOLECULE_KNOWN_IDS);
    cellWidht = p.map(1, 0, molecules.length - 1, xStart, xEnd);
    results = [];
    for (index = i = 0, len = molecules.length; i < len; index = ++i) {
      molecule_id = molecules[index];
      cellX = p.map(index, 0, molecules.length - 1, xStart, xEnd);
      doc_count = _.has(this.molecule_counts, molecule_id) ? this.molecule_counts[molecule_id] : 0;
      col_index = p.floor(p.map(doc_count, 0, 15, 0, 15)) % 15;
      p.fill(col_array[col_index]);
      results.push(p.rect(cellX + 1, yPos + 1, cellWidht - 2, cellHeight - 2));
    }
    return results;
  };

  return Target;

})();

ChEMBLSketch = function(p) {
  var canvas, plotSize, targets;
  console.log(elastic_json_data);
  plotSize = 700;
  targets = null;
  canvas = null;
  p.preload = function() {
    return targets = Target.parseElasticJSON(elastic_json_data);
  };
  p.setup = function() {
    canvas = p.createCanvas(plotSize, plotSize);
    console.log(targets);
    return p.noLoop();
  };
  return p.draw = function() {
    var cellHeight, i, index, len, results, target_i, xPlotEnd, xPlotStart, yPlotEnd, yPlotStart, yPos;
    p.background(0);
    p.fill(0, 255, 0);
    yPlotStart = 0;
    yPlotEnd = p.height;
    xPlotStart = 0;
    xPlotEnd = p.width;
    cellHeight = p.map(1, 0, targets.length - 1, yPlotStart, yPlotEnd);
    results = [];
    for (index = i = 0, len = targets.length; i < len; index = ++i) {
      target_i = targets[index];
      yPos = p.map(index, 0, targets.length - 1, yPlotEnd, yPlotStart);
      results.push(target_i.draw(p, yPos, cellHeight, xPlotStart, xPlotEnd));
    }
    return results;
  };
};

startSketch = function(elastic_data) {
  var sketch;
  elastic_json_data = elastic_data;
  return sketch = new p5(ChEMBLSketch);
};

elastic_query_url = "https://wwwdev.ebi.ac.uk/chembl/glados-es/chembl_activity/_search";

elastic_query_data = {
  aggs: {
    group_by_target: {
      terms: {
        field: "target_chembl_id",
        size: 100
      },
      aggs: {
        group_by_compound: {
          terms: {
            field: "molecule_chembl_id",
            size: 100
          },
          aggs: {
            activity_count: {
              value_count: {
                field: "activity_id"
              }
            }
          }
        }
      }
    }
  }
};

loadElasticJSON = function(url, data, success_callback) {
  return $.ajax(elastic_query_url, {
    data: JSON.stringify(elastic_query_data),
    method: 'POST',
    success: success_callback,
    error: function(jqXHR, textStatus, errorThrown) {
      console.log(textStatus);
      console.log(errorThrown);
      return alert("Error retrieving data!");
    }
  });
};

loadElasticJSON(elastic_query_url, elastic_query_data, startSketch);

//# sourceMappingURL=chembl-sketch.js.map
